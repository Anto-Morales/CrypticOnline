generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
  FAILED
}

enum PaymentMethod {
  PAYPAL
  MERCADOPAGO
  CRYPTO
}

model User {
  id              Int       @id @default(autoincrement())
  nombres         String
  apellidoPaterno String
  apellidoMaterno String
  email           String    @unique
  password        String
  telefono        String
  calle           String
  numero          String
  colonia         String
  ciudad          String
  estado          String
  codigoPostal    String
  referencias     String
  wallet          String?
  role            String    @default("customer")
  isActive        Boolean   @default(true)
  orders          Order[]   @relation(name: "UserOrders")
  products        Product[] @relation(name: "UserProducts")
  createdAt       DateTime  @default(now())
}

model Product {
  id              Int         @id @default(autoincrement())
  name            String
  description     String
  price           Float
  imageUrl        String
  userId          Int
  stock           Int         @default(0)
  user            User  @relation(name: "UserProducts", fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  orderItems      OrderItem[]
  discounts       Discount[]
}

model Discount {
  id          Int       @id @default(autoincrement())
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])
  percentage  Float     // Ej: 10.0 para 10%
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
}

model Order {
  id             Int           @id @default(autoincrement())
  userId         Int
  user           User  @relation(name: "UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  status         OrderStatus   @default(PENDING)
  total          Float
  paymentMethod  PaymentMethod?
  paymentId      String?       // ID externo (PayPal, MP, etc.)
  txHash         String?       // Blockchain
  paidAt         DateTime?
  cancelledAt    DateTime?
  refundedAt     DateTime?
  createdAt      DateTime      @default(now())
  orderItems     OrderItem[]
  paymentDetails Payment[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int     @default(1)
  price     Float   // Precio congelado del producto
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model Payment {
  id           Int      @id @default(autoincrement())
  orderId      Int
  provider     String   // Ej: PAYPAL, MERCADOPAGO
  status       String   // Ej: PENDING, COMPLETED, FAILED
  referenceId  String?  // ID externo del proveedor
  amount       Float
  createdAt    DateTime @default(now())
  order        Order    @relation(fields: [orderId], references: [id])
}
